name: 'Nimbloo Deploy Notifier'
description: 'Send Slack and Email notifications for deployments'
author: 'Nimbloo'

branding:
  icon: 'bell'
  color: 'blue'

inputs:
  project_name:
    description: 'Project name (e.g., "Billing", "DCR API", "Auth Service")'
    required: false
    default: ${{ github.repository }}

  stage:
    description: 'Deployment stage (dev/hml/prd). Auto-detected from branch if not provided.'
    required: false
    default: ''

  version:
    description: 'Application version. Auto-detected from pom.xml or package.json if not provided.'
    required: false
    default: ''

  status:
    description: 'Deployment status (started/success/failed). Auto-detected from job status if not provided.'
    required: false
    default: ''

  stack_name:
    description: 'CloudFormation stack name'
    required: false
    default: ''

  aws_region:
    description: 'AWS region'
    required: false
    default: 'us-east-1'

  slack_webhook_url:
    description: 'Slack webhook URL (can also use repository variable SLACK_WEBHOOK_URL)'
    required: false
    default: ''

  notification_email:
    description: 'Email address to send notifications (can also use repository variable NOTIFICATION_EMAIL)'
    required: false
    default: ''

  notification_email_from:
    description: 'Sender email address (can also use repository variable NOTIFICATION_EMAIL_FROM)'
    required: false
    default: ''

  custom_message:
    description: 'Additional custom message to include in notifications'
    required: false
    default: ''

  started_at:
    description: 'Workflow start timestamp (epoch seconds) for duration calculation. Example: steps.deploy_start.outputs.timestamp'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Setup notification environment
      shell: bash
      run: |
        set -euo pipefail

        # Auto-detect project name
        PROJECT_NAME="${{ inputs.project_name }}"
        if [ -z "$PROJECT_NAME" ] || [[ "$PROJECT_NAME" == *"/"* ]]; then
          PROJECT_NAME=$(basename "${{ github.repository }}")
        fi
        echo "PROJECT_NAME=${PROJECT_NAME}" >> "$GITHUB_ENV"

        # Auto-detect stage from branch
        STAGE="${{ inputs.stage }}"
        if [ -z "$STAGE" ]; then
          case "${{ github.ref_name }}" in
            master|main) STAGE="prd" ;;
            staging|homolog) STAGE="hml" ;;
            develop|dev) STAGE="dev" ;;
            *) STAGE="dev" ;;
          esac
        fi
        echo "STAGE=${STAGE}" >> "$GITHUB_ENV"

        # Auto-detect version
        VERSION="${{ inputs.version }}"
        if [ -z "$VERSION" ]; then
          if [ -f "pom.xml" ]; then
            VERSION=$(grep -oP '<version>\K[^<]+' pom.xml | head -1 || echo "unknown")
          elif [ -f "package.json" ]; then
            VERSION=$(grep -oP '"version":\s*"\K[^"]+' package.json || echo "unknown")
          else
            VERSION="unknown"
          fi
        fi
        echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

        # Auto-detect status
        STATUS="${{ inputs.status }}"
        if [ -z "$STATUS" ]; then
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="success"
          elif [ "${{ job.status }}" == "failure" ]; then
            STATUS="failed"
          else
            STATUS="started"
          fi
        fi
        echo "STATUS=${STATUS}" >> "$GITHUB_ENV"

        # Stack name
        STACK_NAME="${{ inputs.stack_name }}"
        if [ -z "$STACK_NAME" ]; then
          STACK_NAME="${PROJECT_NAME}-${STAGE}"
        fi
        echo "STACK_NAME=${STACK_NAME}" >> "$GITHUB_ENV"

        # AWS Region
        echo "AWS_REGION=${{ inputs.aws_region }}" >> "$GITHUB_ENV"

        # Webhook/Email configs
        echo "SLACK_WEBHOOK=${{ inputs.slack_webhook_url }}" >> "$GITHUB_ENV"
        echo "NOTIFICATION_EMAIL=${{ inputs.notification_email }}" >> "$GITHUB_ENV"
        echo "NOTIFICATION_EMAIL_FROM=${{ inputs.notification_email_from }}" >> "$GITHUB_ENV"

        # Custom message
        echo "CUSTOM_MESSAGE=${{ inputs.custom_message }}" >> "$GITHUB_ENV"

        # Started at (for duration calculation)
        echo "STARTED_AT=${{ inputs.started_at }}" >> "$GITHUB_ENV"

        # GitHub context variables
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> "$GITHUB_ENV"
        echo "GITHUB_REF_NAME=${{ github.ref_name }}" >> "$GITHUB_ENV"
        echo "GITHUB_ACTOR=${{ github.actor }}" >> "$GITHUB_ENV"
        echo "GITHUB_SHA=${{ github.sha }}" >> "$GITHUB_ENV"
        echo "GITHUB_RUN_ID=${{ github.run_id }}" >> "$GITHUB_ENV"

        echo "âœ… Notification config loaded:"
        echo "  Project: ${PROJECT_NAME}"
        echo "  Stage: ${STAGE}"
        echo "  Version: ${VERSION}"
        echo "  Status: ${STATUS}"
        echo "  Stack: ${STACK_NAME}"

    - name: Send notifications
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/notify.sh"
        "${{ github.action_path }}/notify.sh"
